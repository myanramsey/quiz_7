/*
    Find Digits: Difference between Shuffled Digits

    You are given two numbers x and y represented as strings. y is generated by random shuffling x 
    and then adding 0 to n more digits at any random positions.

    Create a function that takes in these two numbers (x and y) as string inputs 
    and returns the newly inserted digit(s) that was/were added to y 
    in the form of a concatenated string of all the newly added digit(s) in an ascending order.
    You must use a set or map data structure from STL to solve the problem.

    Note: A single digit can be added more than once in the new number. In that case more than one occurrence of
    the number must be present in your answer.

    Example:
    Input: x = "1234", y = "12345"
    Output: "5"
    Explanation: "5" is the digit that was added.
    
    Constraints:
    "x" and "y" > 0
    0 < x.length, y.length <= 10^8
    y.length >= x.length
*/

#include <iostream>
#include <string>
#include <algorithm>
#include <set>
#include <map>

using namespace std;

//TODO: Using maps to find the duplicates and count them in each set. Then subtract the number in each set.
// 1234
// 12345
// if number is negative then dont print it

string findTheDigits(string x, string y) {

    set<char> string1(x.begin(),x.end());
    set<char> string2(y.begin(),y.end());
    set<char> result;
    string answer;

    for(auto& str : string1){
        cout << str << " ";
    }
    cout << endl;
    for(auto& str : string2){
        cout << str << " ";
    }
    set_symmetric_difference(string1.begin(),string1.end(),string2.begin(),string2.end(), inserter(result,result.end()));
    cout << endl;
    for(auto& str : result){
        answer += str;
    }

    return answer;
}